<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Trading Bot - Estrat√©gias Avan√ßadas</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 2.5em;
            background: linear-gradient(45deg, #00ff88, #00a8ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h2 {
            margin-bottom: 15px;
            color: #00ff88;
            font-size: 1.3em;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
            padding: 10px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
        }
        
        .metric-label {
            color: #aaa;
        }
        
        .metric-value {
            font-weight: bold;
            font-size: 1.1em;
        }
        
        .profit {
            color: #00ff88;
        }
        
        .loss {
            color: #ff3860;
        }
        
        .neutral {
            color: #ffdd57;
        }
        
        button {
            background: linear-gradient(45deg, #00ff88, #00a8ff);
            color: #000;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 5px;
        }
        
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.4);
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .status {
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            display: inline-block;
        }
        
        .status.active {
            background: rgba(0, 255, 136, 0.3);
            color: #00ff88;
        }
        
        .status.inactive {
            background: rgba(255, 56, 96, 0.3);
            color: #ff3860;
        }
        
        .status.analyzing {
            background: rgba(255, 221, 87, 0.3);
            color: #ffdd57;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 20px;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }
        
        input[type="number"] {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: #fff;
            padding: 8px 12px;
            border-radius: 5px;
            width: 150px;
        }
        
        .alert {
            background: rgba(255, 56, 96, 0.2);
            border: 1px solid #ff3860;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .formula {
            background: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 5px;
            font-family: monospace;
            margin: 10px 0;
            overflow-x: auto;
        }
        
        .log-container {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            padding: 15px;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 20px;
        }
        
        .log-entry {
            margin: 5px 0;
            padding: 5px;
            border-left: 3px solid #00a8ff;
            padding-left: 10px;
            font-size: 0.9em;
        }
        
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid #00ff88;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-left: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ Crypto Trading Bot - Estrat√©gias Avan√ßadas</h1>
        
        <div class="controls">
            <input type="number" id="investment" placeholder="Capital (USD)" value="10000">
            <button onclick="startAllStrategies()">‚ñ∂Ô∏è Iniciar Todas</button>
            <button onclick="stopAllStrategies()">‚èπÔ∏è Parar Todas</button>
            <button onclick="resetDashboard()">üîÑ Reset</button>
        </div>
        
        <div class="dashboard">
            <!-- Arbitragem Triangular -->
            <div class="card">
                <h2>üìê Arbitragem Triangular</h2>
                <div class="formula">
                    Profit = S(BTC/USD) √ó S(ETH/BTC) √ó (1/S(ETH/USD)) - 1
                </div>
                <div class="metric">
                    <span class="metric-label">Status:</span>
                    <span class="status inactive" id="arb-status">Inativo</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Par Atual:</span>
                    <span class="metric-value" id="arb-pair">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Oportunidade:</span>
                    <span class="metric-value" id="arb-opportunity">0.00%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Lucro Potencial:</span>
                    <span class="metric-value profit" id="arb-profit">$0.00</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Trades Executados:</span>
                    <span class="metric-value" id="arb-trades">0</span>
                </div>
                <button onclick="toggleArbitrage()">Iniciar Arbitragem</button>
            </div>
            
            <!-- LSTM Prediction -->
            <div class="card">
                <h2>üß† Previs√£o LSTM Neural</h2>
                <div class="formula">
                    h(t) = tanh(W_hh √ó h(t-1) + W_xh √ó x(t) + b_h)
                </div>
                <div class="metric">
                    <span class="metric-label">Status:</span>
                    <span class="status inactive" id="lstm-status">Inativo</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Pre√ßo Atual BTC:</span>
                    <span class="metric-value" id="lstm-current">$0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Previs√£o 1h:</span>
                    <span class="metric-value" id="lstm-prediction">$0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Confian√ßa:</span>
                    <span class="metric-value" id="lstm-confidence">0%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Sinal:</span>
                    <span class="metric-value" id="lstm-signal">NEUTRO</span>
                </div>
                <div class="chart-container">
                    <canvas id="lstm-chart"></canvas>
                </div>
                <button onclick="toggleLSTM()">Iniciar Previs√£o</button>
            </div>
            
            <!-- Funding Rate Arbitrage -->
            <div class="card">
                <h2>üí∞ Funding Rate Arbitrage</h2>
                <div class="formula">
                    PnL = (Funding_received - Funding_paid) √ó Position
                </div>
                <div class="metric">
                    <span class="metric-label">Status:</span>
                    <span class="status inactive" id="funding-status">Inativo</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Funding Rate:</span>
                    <span class="metric-value" id="funding-rate">0.000%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Posi√ß√£o Spot:</span>
                    <span class="metric-value" id="funding-spot">$0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Posi√ß√£o Perp√©tuo:</span>
                    <span class="metric-value" id="funding-perp">$0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">PnL Di√°rio:</span>
                    <span class="metric-value profit" id="funding-pnl">$0.00</span>
                </div>
                <div class="metric">
                    <span class="metric-label">APR Estimado:</span>
                    <span class="metric-value" id="funding-apr">0.00%</span>
                </div>
                <button onclick="toggleFunding()">Iniciar Funding Arb</button>
            </div>
            
            <!-- Pump & Dump Detection -->
            <div class="card">
                <h2>üö® Detec√ß√£o Pump & Dump</h2>
                <div class="formula">
                    Anomaly = (V_t - Œº_V)/œÉ_V > 3 AND ŒîP/P > 0.1
                </div>
                <div class="metric">
                    <span class="metric-label">Status:</span>
                    <span class="status active" id="pump-status">Monitorando</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Moedas Analisadas:</span>
                    <span class="metric-value" id="pump-coins">0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Anomalias Detectadas:</span>
                    <span class="metric-value" id="pump-anomalies">0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Z-Score Volume:</span>
                    <span class="metric-value" id="pump-zscore">0.00</span>
                </div>
                <div id="pump-alerts"></div>
                <button onclick="togglePumpDetection()">Toggle Detec√ß√£o</button>
            </div>
        </div>
        
        <!-- Resumo Geral -->
        <div class="card">
            <h2>üìä Resumo Geral</h2>
            <div class="dashboard">
                <div class="metric">
                    <span class="metric-label">Capital Total:</span>
                    <span class="metric-value" id="total-capital">$10,000</span>
                </div>
                <div class="metric">
                    <span class="metric-label">P&L Total:</span>
                    <span class="metric-value profit" id="total-pnl">$0.00</span>
                </div>
                <div class="metric">
                    <span class="metric-label">ROI:</span>
                    <span class="metric-value" id="total-roi">0.00%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">Estrat√©gias Ativas:</span>
                    <span class="metric-value" id="active-strategies">0/4</span>
                </div>
            </div>
            <div class="log-container" id="log-container"></div>
        </div>
    </div>

    <script>
        // Estado Global
        let state = {
            arbitrage: { active: false, trades: 0, totalProfit: 0 },
            lstm: { active: false, predictions: [] },
            funding: { active: false, positions: {} },
            pump: { active: true, alerts: [] },
            capital: 10000,
            totalPnL: 0
        };

        // Simula√ß√£o de pre√ßos (em produ√ß√£o, usar APIs reais)
        const mockPrices = {
            'BTC/USD': 45000 + Math.random() * 1000,
            'ETH/USD': 3000 + Math.random() * 50,
            'ETH/BTC': 0.0667 + Math.random() * 0.001,
            'BNB/USD': 400 + Math.random() * 10,
            'BNB/BTC': 0.0089 + Math.random() * 0.0001
        };

        // Fun√ß√£o para adicionar log
        function addLog(message, type = 'info') {
            const logContainer = document.getElementById('log-container');
            const entry = document.createElement('div');
            entry.className = 'log-entry';
            const time = new Date().toLocaleTimeString();
            entry.innerHTML = `<strong>[${time}]</strong> ${message}`;
            logContainer.insertBefore(entry, logContainer.firstChild);
            
            // Limitar logs a 50 entradas
            while (logContainer.children.length > 50) {
                logContainer.removeChild(logContainer.lastChild);
            }
        }

        // ==========================
        // ARBITRAGEM TRIANGULAR
        // ==========================
        let arbInterval = null;
        
        function calculateTriangularArbitrage() {
            // Atualizar pre√ßos simulados
            Object.keys(mockPrices).forEach(pair => {
                mockPrices[pair] *= (0.995 + Math.random() * 0.01);
            });
            
            // F√≥rmula: Profit = S(BTC/USD) √ó S(ETH/BTC) √ó (1/S(ETH/USD)) - 1
            const btcUsd = mockPrices['BTC/USD'];
            const ethBtc = mockPrices['ETH/BTC'];
            const ethUsd = mockPrices['ETH/USD'];
            
            const profit = (btcUsd * ethBtc * (1/ethUsd)) - 1;
            const profitPercent = profit * 100;
            
            // Atualizar UI
            document.getElementById('arb-pair').textContent = 'BTC‚ÜíETH‚ÜíUSD‚ÜíBTC';
            document.getElementById('arb-opportunity').textContent = profitPercent.toFixed(3) + '%';
            
            // Se h√° oportunidade de arbitragem (considerando fees de 0.1%)
            if (profitPercent > 0.3) {
                const capitalToUse = state.capital * 0.1; // Usar 10% do capital
                const potentialProfit = capitalToUse * profit;
                
                document.getElementById('arb-opportunity').classList.add('profit');
                document.getElementById('arb-profit').textContent = '$' + potentialProfit.toFixed(2);
                
                // Executar trade simulado
                if (Math.random() > 0.7) { // 30% de chance de executar
                    state.arbitrage.trades++;
                    state.arbitrage.totalProfit += potentialProfit;
                    state.totalPnL += potentialProfit;
                    
                    document.getElementById('arb-trades').textContent = state.arbitrage.trades;
                    addLog(`‚úÖ Arbitragem executada! Lucro: $${potentialProfit.toFixed(2)}`, 'success');
                    updateTotalMetrics();
                }
            } else {
                document.getElementById('arb-opportunity').classList.remove('profit');
                document.getElementById('arb-profit').textContent = '$0.00';
            }
            
            // Verificar outras combina√ß√µes
            checkOtherArbitragePairs();
        }
        
        function checkOtherArbitragePairs() {
            // BNB triangular
            const bnbUsd = mockPrices['BNB/USD'];
            const bnbBtc = mockPrices['BNB/BTC'];
            const btcUsd = mockPrices['BTC/USD'];
            
            const bnbProfit = (bnbBtc * btcUsd * (1/bnbUsd)) - 1;
            
            if (bnbProfit * 100 > 0.3) {
                addLog(`üí° Oportunidade BNB: ${(bnbProfit * 100).toFixed(3)}%`);
            }
        }
        
        function toggleArbitrage() {
            state.arbitrage.active = !state.arbitrage.active;
            
            if (state.arbitrage.active) {
                document.getElementById('arb-status').textContent = 'Ativo';
                document.getElementById('arb-status').className = 'status active';
                arbInterval = setInterval(calculateTriangularArbitrage, 2000);
                addLog('üîÑ Arbitragem triangular iniciada');
            } else {
                document.getElementById('arb-status').textContent = 'Inativo';
                document.getElementById('arb-status').className = 'status inactive';
                clearInterval(arbInterval);
                addLog('‚èπÔ∏è Arbitragem triangular pausada');
            }
        }
        
        // ==========================
        // LSTM PREDICTION
        // ==========================
        let lstmInterval = null;
        let lstmChart = null;
        
        class SimpleLSTM {
            constructor() {
                // Pesos simulados da rede neural
                this.Whh = this.randomMatrix(10, 10);
                this.Wxh = this.randomMatrix(10, 1);
                this.Why = this.randomMatrix(1, 10);
                this.bh = this.randomVector(10);
                this.by = Math.random();
                this.hidden = this.randomVector(10);
            }
            
            randomMatrix(rows, cols) {
                return Array(rows).fill().map(() => 
                    Array(cols).fill().map(() => (Math.random() - 0.5) * 0.1)
                );
            }
            
            randomVector(size) {
                return Array(size).fill().map(() => (Math.random() - 0.5) * 0.1);
            }
            
            tanh(x) {
                return Math.tanh(x);
            }
            
            predict(input) {
                // h(t) = tanh(W_hh √ó h(t-1) + W_xh √ó x(t) + b_h)
                const newHidden = [];
                
                for (let i = 0; i < 10; i++) {
                    let sum = this.bh[i];
                    
                    // W_hh √ó h(t-1)
                    for (let j = 0; j < 10; j++) {
                        sum += this.Whh[i][j] * this.hidden[j];
                    }
                    
                    // W_xh √ó x(t)
                    sum += this.Wxh[i][0] * input;
                    
                    newHidden[i] = this.tanh(sum);
                }
                
                this.hidden = newHidden;
                
                // y(t) = W_hy √ó h(t) + b_y
                let output = this.by;
                for (let i = 0; i < 10; i++) {
                    output += this.Why[0][i] * this.hidden[i];
                }
                
                return output;
            }
        }
        
        const lstm = new SimpleLSTM();
        
        function runLSTMPrediction() {
            const currentPrice = mockPrices['BTC/USD'];
            const normalizedPrice = currentPrice / 50000; // Normalizar
            
            // Fazer previs√£o
            const prediction = lstm.predict(normalizedPrice);
            const predictedPrice = (currentPrice + prediction * 1000); // Desnormalizar
            
            const confidence = 60 + Math.random() * 30; // Confian√ßa simulada
            const signal = predictedPrice > currentPrice ? 'COMPRA' : 
                          predictedPrice < currentPrice * 0.99 ? 'VENDA' : 'NEUTRO';
            
            // Atualizar UI
            document.getElementById('lstm-current').textContent = '$' + currentPrice.toFixed(2);
            document.getElementById('lstm-prediction').textContent = '$' + predictedPrice.toFixed(2);
            document.getElementById('lstm-confidence').textContent = confidence.toFixed(1) + '%';
            document.getElementById('lstm-signal').textContent = signal;
            
            // Colorir sinal
            const signalElement = document.getElementById('lstm-signal');
            if (signal === 'COMPRA') {
                signalElement.className = 'metric-value profit';
            } else if (signal === 'VENDA') {
                signalElement.className = 'metric-value loss';
            } else {
                signalElement.className = 'metric-value neutral';
            }
            
            // Atualizar gr√°fico
            updateLSTMChart(currentPrice, predictedPrice);
            
            // Simular trade baseado na previs√£o
            if (confidence > 80 && signal !== 'NEUTRO') {
                const tradeSize = state.capital * 0.05;
                const profit = (Math.random() - 0.4) * tradeSize * 0.02; // Simula√ß√£o
                
                if (profit > 0) {
                    state.totalPnL += profit;
                    addLog(`üìà LSTM Trade ${signal}: +$${profit.toFixed(2)}`);
                }
                updateTotalMetrics();
            }
        }
        
        function initLSTMChart() {
            const ctx = document.getElementById('lstm-chart').getContext('2d');
            lstmChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Pre√ßo Real',
                        data: [],
                        borderColor: '#00ff88',
                        backgroundColor: 'rgba(0, 255, 136, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Previs√£o LSTM',
                        data: [],
                        borderColor: '#00a8ff',
                        backgroundColor: 'rgba(0, 168, 255, 0.1)',
                        borderDash: [5, 5],
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: { color: '#fff' }
                        }
                    },
                    scales: {
                        x: {
                            ticks: { color: '#fff' },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        },
                        y: {
                            ticks: { color: '#fff' },
                            grid: { color: 'rgba(255, 255, 255, 0.1)' }
                        }
                    }
                }
            });
        }
        
        function updateLSTMChart(current, predicted) {
            if (!lstmChart) return;
            
            const time = new Date().toLocaleTimeString();
            
            // Adicionar novos dados
            lstmChart.data.labels.push(time);
            lstmChart.data.datasets[0].data.push(current);
            lstmChart.data.datasets[1].data.push(predicted);
            
            // Manter apenas √∫ltimos 20 pontos
            if (lstmChart.data.labels.length > 20) {
                lstmChart.data.labels.shift();
                lstmChart.data.datasets[0].data.shift();
                lstmChart.data.datasets[1].data.shift();
            }
            
            lstmChart.update();
        }
        
        function toggleLSTM() {
            state.lstm.active = !state.lstm.active;
            
            if (state.lstm.active) {
                document.getElementById('lstm-status').textContent = 'Treinando';
                document.getElementById('lstm-status').className = 'status analyzing';
                
                if (!lstmChart) initLSTMChart();
                
                setTimeout(() => {
                    document.getElementById('lstm-status').textContent = 'Ativo';
                    document.getElementById('lstm-status').className = 'status active';
                    lstmInterval = setInterval(runLSTMPrediction, 3000);
                    addLog('üß† Modelo LSTM iniciado e treinado');
                }, 2000);
            } else {
                document.getElementById('lstm-status').textContent = 'Inativo';
                document.getElementById('lstm-status').className = 'status inactive';
                clearInterval(lstmInterval);
                addLog('‚èπÔ∏è Modelo LSTM pausado');
            }
        }
        
        // ==========================
        // FUNDING RATE ARBITRAGE
        // ==========================
        let fundingInterval = null;
        
        function calculateFundingArbitrage() {
            // Simular funding rate (geralmente entre -0.01% e 0.1%)
            const fundingRate = (Math.random() - 0.3) * 0.001;
            const fundingPercent = fundingRate * 100;
            
            document.getElementById('funding-rate').textContent = fundingPercent.toFixed(4) + '%';
            
            // Se funding > 0, fazer long spot + short perp√©tuo
            if (fundingRate > 0) {
                const positionSize = state.capital * 0.3;
                
                // Atualizar posi√ß√µes
                document.getElementById('funding-spot').textContent = '$' + positionSize.toFixed(2) + ' (LONG)';
                document.getElementById('funding-perp').textContent = '$' + positionSize.toFixed(2) + ' (SHORT)';
                
                // PnL = (Funding_received - Funding_paid) √ó Position
                // Como estamos short no perp√©tuo, recebemos funding
                const pnlPer8Hours = positionSize * fundingRate;
                const dailyPnL = pnlPer8Hours * 3; // 3x por dia
                const apr = fundingRate * 3 * 365 * 100; // APR anualizado
                
                document.getElementById('funding-pnl').textContent = '$' + dailyPnL.toFixed(2);
                document.getElementById('funding-apr').textContent = apr.toFixed(2) + '%';
                
                // Adicionar ao P&L total periodicamente
                if (Math.random() > 0.8) {
                    state.totalPnL += dailyPnL / 10; // Dividir por 10 para simula√ß√£o
                    addLog(`üí∞ Funding arbitrage: +$${(dailyPnL/10).toFixed(2)}`);
                    updateTotalMetrics();
                }
            } else {
                // Funding negativo - inverter posi√ß√µes ou n√£o operar
                document.getElementById('funding-spot').textContent = '$0 (Aguardando)';
                document.getElementById('funding-perp').textContent = '$0 (Aguardando)';
                document.getElementById('funding-pnl').textContent = '$0.00';
                document.getElementById('funding-apr').textContent = '0.00%';
            }
        }
        
        function toggleFunding() {
            state.funding.active = !state.funding.active;
            
            if (state.funding.active) {
                document.getElementById('funding-status').textContent = 'Ativo';
                document.getElementById('funding-status').className = 'status active';
                fundingInterval = setInterval(calculateFundingArbitrage, 4000);
                addLog('üí∞ Funding rate arbitrage iniciado');
            } else {
                document.getElementById('funding-status').textContent = 'Inativo';
                document.getElementById('funding-status').className = 'status inactive';
                clearInterval(fundingInterval);
                addLog('‚èπÔ∏è Funding rate arbitrage pausado');
            }
        }
        
        // ==========================
        // PUMP & DUMP DETECTION
        // ==========================
        let pumpInterval = null;
        
        function detectPumpAndDump() {
            const coins = ['DOGE', 'SHIB', 'PEPE', 'FLOKI', 'BONK'];
            const selectedCoin = coins[Math.floor(Math.random() * coins.length)];
            
            // Simular dados de volume
            const normalVolume = 1000000 + Math.random() * 500000;
            const currentVolume = normalVolume * (0.5 + Math.random() * 3);
            const volumeStdDev = normalVolume * 0.3;
            
            // Calcular Z-Score: (V_t - Œº_V) / œÉ_V
            const zScore = (currentVolume - normalVolume) / volumeStdDev;
            
            // Simular mudan√ßa de pre√ßo
            const priceChange = (Math.random() - 0.3) * 0.2; // -10% a +10%
            
            document.getElementById('pump-coins').textContent = coins.length;
            document.getElementById('pump-zscore').textContent = zScore.toFixed(2);
            
            // Detectar anomalia: Z-Score > 3 AND ŒîP/P > 0.1
            if (zScore > 3 && priceChange > 0.1) {
                state.pump.alerts.push({
                    coin: selectedCoin,
                    zScore: zScore,
                    priceChange: priceChange,
                    time: new Date()
                });
                
                document.getElementById('pump-anomalies').textContent = state.pump.alerts.length;
                
                // Criar alerta visual
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert';
                alertDiv.innerHTML = `
                    ‚ö†Ô∏è PUMP DETECTADO: ${selectedCoin}<br>
                    Z-Score: ${zScore.toFixed(2)} | Œî Pre√ßo: +${(priceChange * 100).toFixed(1)}%
                `;
                
                const alertsContainer = document.getElementById('pump-alerts');
                alertsContainer.insertBefore(alertDiv, alertsContainer.firstChild);
                
                // Limitar a 3 alertas vis√≠veis
                while (alertsContainer.children.length > 3) {
                    alertsContainer.removeChild(alertsContainer.lastChild);
                }
                
                addLog(`üö® ALERTA: Poss√≠vel pump em ${selectedCoin}! Z-Score: ${zScore.toFixed(2)}`);
            }
        }
        
        function togglePumpDetection() {
            state.pump.active = !state.pump.active;
            
            if (state.pump.active) {
                document.getElementById('pump-status').textContent = 'Monitorando';
                document.getElementById('pump-status').className = 'status active';
                pumpInterval = setInterval(detectPumpAndDump, 5000);
                addLog('üö® Detec√ß√£o de Pump & Dump ativada');
            } else {
                document.getElementById('pump-status').textContent = 'Pausado';
                document.getElementById('pump-status').className = 'status inactive';
                clearInterval(pumpInterval);
                addLog('‚èπÔ∏è Detec√ß√£o de Pump & Dump pausada');
            }
        }
        
        // ==========================
        // CONTROLES GERAIS
        // ==========================
        function updateTotalMetrics() {
            const capital = parseFloat(document.getElementById('investment').value) || 10000;
            const totalCapital = capital + state.totalPnL;
            const roi = (state.totalPnL / capital) * 100;
            
            document.getElementById('total-capital').textContent = '$' + totalCapital.toFixed(2);
            document.getElementById('total-pnl').textContent = '$' + state.totalPnL.toFixed(2);
            document.getElementById('total-roi').textContent = roi.toFixed(2) + '%';
            
            // Colorir P&L
            const pnlElement = document.getElementById('total-pnl');
            if (state.totalPnL > 0) {
                pnlElement.className = 'metric-value profit';
            } else if (state.totalPnL < 0) {
                pnlElement.className = 'metric-value loss';
            }
            
            // Contar estrat√©gias ativas
            let activeCount = 0;
            if (state.arbitrage.active) activeCount++;
            if (state.lstm.active) activeCount++;
            if (state.funding.active) activeCount++;
            if (state.pump.active) activeCount++;
            
            document.getElementById('active-strategies').textContent = activeCount + '/4';
        }
        
        function startAllStrategies() {
            if (!state.arbitrage.active) toggleArbitrage();
            if (!state.lstm.active) toggleLSTM();
            if (!state.funding.active) toggleFunding();
            if (!state.pump.active) togglePumpDetection();
            
            addLog('üöÄ Todas as estrat√©gias iniciadas!');
        }
        
        function stopAllStrategies() {
            if (state.arbitrage.active) toggleArbitrage();
            if (state.lstm.active) toggleLSTM();
            if (state.funding.active) toggleFunding();
            if (state.pump.active) togglePumpDetection();
            
            addLog('‚èπÔ∏è Todas as estrat√©gias pausadas');
        }
        
        function resetDashboard() {
            stopAllStrategies();
            
            state = {
                arbitrage: { active: false, trades: 0, totalProfit: 0 },
                lstm: { active: false, predictions: [] },
                funding: { active: false, positions: {} },
                pump: { active: false, alerts: [] },
                capital: 10000,
                totalPnL: 0
            };
            
            // Resetar UI
            document.getElementById('arb-trades').textContent = '0';
            document.getElementById('pump-anomalies').textContent = '0';
            document.getElementById('pump-alerts').innerHTML = '';
            document.getElementById('log-container').innerHTML = '';
            
            updateTotalMetrics();
            addLog('üîÑ Dashboard resetado');
        }
        
        // Atualizar capital quando mudar
        document.getElementById('investment').addEventListener('change', (e) => {
            state.capital = parseFloat(e.target.value) || 10000;
            updateTotalMetrics();
        });
        
        // Inicializar
        updateTotalMetrics();
        togglePumpDetection(); // Iniciar detec√ß√£o de pump por padr√£o
        addLog('üéØ Sistema inicializado. Configure seu capital e inicie as estrat√©gias!');
        
        // Simula√ß√£o de mercado em tempo real
        setInterval(() => {
            // Adicionar pequenas flutua√ß√µes nos pre√ßos
            Object.keys(mockPrices).forEach(pair => {
                mockPrices[pair] *= (0.9995 + Math.random() * 0.001);
            });
        }, 1000);
    </script>
</body>
</html>
